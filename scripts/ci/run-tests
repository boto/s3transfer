#!/usr/bin/env python
# Don't run tests from the root repo dir.
# We want to ensure we're importing from the installed
# binary package not from the CWD.

import argparse
import os
from subprocess import check_call

_dname = os.path.dirname

REPO_ROOT = _dname(_dname(_dname(os.path.abspath(__file__))))
PACKAGE = "s3transfer"
os.chdir(os.path.join(REPO_ROOT, "tests"))


def run(command, env=None):
    return check_call(command, shell=True, env=env)


def process_args(args):
    runner = args.test_runner
    test_args = ""
    if args.with_cov:
        test_args += (
            f"--with-xunit --cover-erase --with-coverage "
            f"--cover-package {PACKAGE} --cover-xml -v "
        )
    dirs = " ".join(args.test_dirs)

    # Unit tests cannot be run with Serial Executor
    # TODO: We should add appropriate skips with pytest and remove this
    serial_dir_list = [d for d in args.test_dirs if d.lower() not in ("unit", "unit/")]
    serial_dirs = " ".join(serial_dir_list)

    return runner, test_args, dirs, serial_dirs


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "test_dirs",
        default=["unit/", "functional/"],
        nargs="*",
        help="One or more directories containing tests.",
    )
    parser.add_argument(
        "-r",
        "--test-runner",
        default="nosetests",
        help="Test runner to execute tests. Defaults to nose.",
    )
    parser.add_argument(
        "-c",
        "--with-cov",
        default=False,
        action="store_true",
        help="Run default test-runner with code coverage enabled.",
    )
    raw_args = parser.parse_args()
    test_runner, test_args, test_dirs, serial_dirs = process_args(raw_args)

    cmd = f"{test_runner} {test_args}{test_dirs}"
    print(f"Running {cmd}...")
    run(cmd)

    # Run the serial implementation of s3transfer
    os.environ["USE_SERIAL_EXECUTOR"] = "True"
    cmd = f"{test_runner} {test_args}{serial_dirs}"
    print(f"Running serial execution for {cmd}...")
    run(cmd, env=os.environ)
